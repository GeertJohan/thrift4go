/* Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package simple;

import (
        "thrift"
        "fmt"
)



type UndefinedValues int
const (
  Foo UndefinedValues = 0
  Bar UndefinedValues = 1
  Baz UndefinedValues = 2
)
func (p UndefinedValues) String() string {
  switch p {
  case Foo: return "Foo"
  case Bar: return "Bar"
  case Baz: return "Baz"
  }
  return ""
}

func FromUndefinedValuesString(s string) UndefinedValues {
  switch s {
  case "Foo": return Foo
  case "Bar": return Bar
  case "Baz": return Baz
  }
  return UndefinedValues(-10000)
}

func (p UndefinedValues) Value() int {
  return int(p)
}

func (p UndefinedValues) IsEnum() bool {
  return true
}

type DefinedValues int
const (
  Foo DefinedValues = 1
  Bar DefinedValues = 2
  Baz DefinedValues = 3
)
func (p DefinedValues) String() string {
  switch p {
  case Foo: return "Foo"
  case Bar: return "Bar"
  case Baz: return "Baz"
  }
  return ""
}

func FromDefinedValuesString(s string) DefinedValues {
  switch s {
  case "Foo": return Foo
  case "Bar": return Bar
  case "Baz": return Baz
  }
  return DefinedValues(-10000)
}

func (p DefinedValues) Value() int {
  return int(p)
}

func (p DefinedValues) IsEnum() bool {
  return true
}

type HeterogeneousValues int
const (
  Foo HeterogeneousValues = 0
  Bar HeterogeneousValues = 2
  Baz HeterogeneousValues = 3
  Qux HeterogeneousValues = 4
)
func (p HeterogeneousValues) String() string {
  switch p {
  case Foo: return "Foo"
  case Bar: return "Bar"
  case Baz: return "Baz"
  case Qux: return "Qux"
  }
  return ""
}

func FromHeterogeneousValuesString(s string) HeterogeneousValues {
  switch s {
  case "Foo": return Foo
  case "Bar": return Bar
  case "Baz": return Baz
  case "Qux": return Qux
  }
  return HeterogeneousValues(-10000)
}

func (p HeterogeneousValues) Value() int {
  return int(p)
}

func (p HeterogeneousValues) IsEnum() bool {
  return true
}

func init() {
}

